#!/usr/bin/env python
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Import ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ô 2
- ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ñ‡∏£‡∏ö
- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠/E-book)
- ‡πÄ‡∏û‡∏¥‡πà‡∏° OPAC link
‡∏£‡∏±‡∏ô: python fix_import_v2.py
"""

import os
import django
import pandas as pd

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'webproject.settings')
django.setup()

from resources.models import Book, ResourceType, Subject

def fix_and_reimport():
    """‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞ import ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
    
    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    print("üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...")
    deleted_count = Book.objects.all().delete()[0]
    print(f"‚úÖ ‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß {deleted_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
    excel_file = 'capture/namebook.xlsx'
    if not os.path.exists(excel_file):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {excel_file}")
        return
    
    print(f"üìñ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {excel_file}...")
    df = pd.read_excel(excel_file)
    
    print(f"üìä Columns: {list(df.columns)}")
    print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: {len(df)}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ columns ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    if len(df.columns) < 4:
        print("‚ùå Excel ‡πÑ‡∏°‡πà‡∏°‡∏µ columns ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
        return
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î columns ‡∏ï‡∏≤‡∏° Excel structure
    title_col = df.columns[1]     # Column B = ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
    author_col = df.columns[2]    # Column C = ‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á  
    type_col = df.columns[3]      # Column D = ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    opac_col = df.columns[4] if len(df.columns) > 4 else None  # Column E = OPAC
    
    print(f"üìù Column Mapping:")
    print(f"   ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: {title_col}")
    print(f"   ‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á: {author_col}")
    print(f"   ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {type_col}")
    print(f"   OPAC: {opac_col}")
    
    # ‡∏î‡∏∂‡∏á ResourceTypes
    resource_types = {}
    for rt in ResourceType.objects.all():
        resource_types[rt.name] = rt
    
    default_subject = Subject.objects.filter(name='‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ').first()
    
    print(f"üìö ResourceTypes ‡∏ó‡∏µ‡πà‡∏°‡∏µ: {list(resource_types.keys())}")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° Import
    print("\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Import...")
    created_count = 0
    error_count = 0
    
    for index, row in df.iterrows():
        try:
            # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
            title = str(row[title_col]).strip() if pd.notna(row[title_col]) else None
            if not title or len(title) < 3:
                error_count += 1
                continue
            
            # ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á
            author = str(row[author_col]).strip() if pd.notna(row[author_col]) else None
            if author == '-':
                author = None
            
            # ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            resource_type_name = str(row[type_col]).strip() if pd.notna(row[type_col]) else '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠'
            
            # ‡∏´‡∏≤ ResourceType ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
            resource_type = resource_types.get(resource_type_name)
            if not resource_type:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏ä‡πâ default
                resource_type = resource_types.get('‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠') or list(resource_types.values())[0]
            
            # ‡∏î‡∏∂‡∏á OPAC URL
            opac_url = None
            if opac_col and pd.notna(row[opac_col]):
                opac_url = str(row[opac_col]).strip()
                if not opac_url.startswith('http'):
                    opac_url = None
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥
            if Book.objects.filter(title=title).exists():
                continue
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
            book = Book.objects.create(
                title=title,
                author=author,
                resource_type=resource_type,
                subject=default_subject,
                opac_url=opac_url,
                language='‡πÑ‡∏ó‡∏¢',
                order_number=index + 1,
                is_active=True,
                is_available=True
            )
            
            created_count += 1
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            if created_count <= 10:
                print(f"‚úÖ {created_count:3d}: [{resource_type.name}] {title[:50]}")
            elif created_count % 20 == 0:
                print(f"‚úÖ {created_count:3d}: [{resource_type.name}] {title[:50]}")
                
        except Exception as e:
            error_count += 1
            print(f"‚ùå Error row {index+1}: {str(e)}")
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    print(f"\nüéâ Import ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print(f"   ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà: {created_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"   ‚ùå Error: {error_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    print(f"\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:")
    for rt in ResourceType.objects.all():
        count = Book.objects.filter(resource_type=rt).count()
        if count > 0:
            print(f"   {rt.name}: {count} ‡πÄ‡∏•‡πà‡∏°")
    
    print(f"\nüìö ‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: {Book.objects.count()} ‡πÄ‡∏•‡πà‡∏°")


if __name__ == '__main__':
    print("üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£ Import - ‡∏£‡∏≠‡∏ö 2...")
    print("="*50)
    fix_and_reimport()