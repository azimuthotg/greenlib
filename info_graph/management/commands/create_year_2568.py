# info_graph/management/commands/create_year_2568.py
from django.core.management.base import BaseCommand
from info_graph.models import Year, Month, DataEntry
from greenweb.models import Year as GreenYear, Category as GreenCategory, Issue as GreenIssue, Indicator as GreenIndicator, Evidence as GreenEvidence
from docChecker.models import Year as DocYear, CategoryGroup, Category as DocCategory, Issue as DocIssue, Indicator as DocIndicator, Evidence as DocEvidence

class Command(BaseCommand):
    help = '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ 2568 ‡∏à‡∏≤‡∏Å‡∏õ‡∏µ 2567 (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô)'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ 2568...'))
        
        try:
            # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏µ 2568 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å app
            self.stdout.write('üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏µ 2568 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ app...')
            
            # info_graph
            info_year_2568, created = Year.objects.get_or_create(year=2568)
            self.stdout.write(f'   ‚úÖ info_graph Year 2568: {"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà" if created else "‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"}')
            
            # greenweb
            green_year_2568, created = GreenYear.objects.get_or_create(year=2568)
            self.stdout.write(f'   ‚úÖ greenweb Year 2568: {"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà" if created else "‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"}')
            
            # docChecker
            doc_year_2568, created = DocYear.objects.get_or_create(
                year_name='2568',
                defaults={
                    'year_description': '‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡∏û.‡∏®. 2568 (‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2567 - ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2568)'
                }
            )
            self.stdout.write(f'   ‚úÖ docChecker Year 2568: {"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà" if created else "‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"}')

            # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Month ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö info_graph ‡∏õ‡∏µ 2568
            self.stdout.write('\nüìä ‡∏™‡∏£‡πâ‡∏≤‡∏á Month ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö info_graph...')
            months_data = [
                (1, '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°'), (2, '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå'), (3, '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°'), (4, '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô'),
                (5, '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°'), (6, '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô'), (7, '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°'), (8, '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°'),
                (9, '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô'), (10, '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°'), (11, '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô'), (12, '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°')
            ]

            for month_num, month_name in months_data:
                month_obj, created = Month.objects.get_or_create(
                    year=info_year_2568,
                    month=month_num,
                    defaults={'month_name': month_name}
                )
                self.stdout.write(f'   üìÖ {month_name}: {"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà" if created else "‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"}')

            # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á DataEntry ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö info_graph ‡∏õ‡∏µ 2568
            self.stdout.write('\nüìà ‡∏™‡∏£‡πâ‡∏≤‡∏á DataEntry ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö info_graph...')
            for month_obj in Month.objects.filter(year=info_year_2568):
                data_entry, created = DataEntry.objects.get_or_create(
                    month=month_obj,
                    defaults={
                        'greenhouse_gas': 0,
                        'electricity': 0,
                        'diesel': 0,
                        'water': 0,
                        'landfill_waste': 0,
                        'paper_a4_a3': 0
                    }
                )
                self.stdout.write(f'   üìä DataEntry {month_obj.month_name}: {"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà" if created else "‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"}')

            # 4. Copy ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á greenweb ‡∏à‡∏≤‡∏Å‡∏õ‡∏µ 2567 ‡πÑ‡∏õ‡∏õ‡∏µ 2568
            self.stdout.write('\nüåø ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á greenweb ‡∏à‡∏≤‡∏Å‡∏õ‡∏µ 2567 ‡πÑ‡∏õ‡∏õ‡∏µ 2568...')
            green_year_2567 = GreenYear.objects.filter(year=2567).first()

            if green_year_2567:
                categories_2567 = GreenCategory.objects.filter(year=green_year_2567)
                
                for cat_2567 in categories_2567:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Category ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ 2568
                    cat_2568, created = GreenCategory.objects.get_or_create(
                        year=green_year_2568,
                        category_name=cat_2567.category_name,
                        defaults={'order': cat_2567.order}
                    )
                    self.stdout.write(f'   üìÅ Category: {cat_2567.category_name} ({"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà" if created else "‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"})')
                    
                    # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Issues
                    issues_2567 = GreenIssue.objects.filter(category=cat_2567)
                    for issue_2567 in issues_2567:
                        issue_2568, created = GreenIssue.objects.get_or_create(
                            category=cat_2568,
                            issue_name=issue_2567.issue_name,
                            defaults={'order': issue_2567.order}
                        )
                        self.stdout.write(f'     üìù Issue: {issue_2567.issue_name} ({"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà" if created else "‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"})')
                        
                        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Indicators
                        indicators_2567 = GreenIndicator.objects.filter(issue=issue_2567)
                        for indicator_2567 in indicators_2567:
                            indicator_2568, created = GreenIndicator.objects.get_or_create(
                                issue=issue_2568,
                                indicator_name=indicator_2567.indicator_name,
                                defaults={'order': indicator_2567.order}
                            )
                            self.stdout.write(f'       üéØ Indicator: {indicator_2567.indicator_name} ({"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà" if created else "‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"})')
            else:
                self.stdout.write(self.style.WARNING('   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ 2567 ‡πÉ‡∏ô greenweb'))

            # 5. Copy ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á docChecker ‡∏à‡∏≤‡∏Å‡∏õ‡∏µ 2567 ‡πÑ‡∏õ‡∏õ‡∏µ 2568
            self.stdout.write('\nüìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á docChecker ‡∏à‡∏≤‡∏Å‡∏õ‡∏µ 2567 ‡πÑ‡∏õ‡∏õ‡∏µ 2568...')
            doc_year_2567 = DocYear.objects.filter(year_name='2567').first()

            if doc_year_2567:
                # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å CategoryGroups
                cat_groups_2567 = CategoryGroup.objects.filter(year=doc_year_2567)
                
                for group_2567 in cat_groups_2567:
                    group_2568, created = CategoryGroup.objects.get_or_create(
                        year=doc_year_2568,
                        group_name=group_2567.group_name,
                        defaults={'group_description': group_2567.group_description}
                    )
                    self.stdout.write(f'   üìÇ CategoryGroup: {group_2567.group_name} ({"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà" if created else "‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"})')
                    
                    # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Categories
                    categories_2567 = DocCategory.objects.filter(category_group=group_2567)
                    for cat_2567 in categories_2567:
                        cat_2568, created = DocCategory.objects.get_or_create(
                            category_group=group_2568,
                            category_name=cat_2567.category_name,
                            defaults={'category_description': cat_2567.category_description}
                        )
                        self.stdout.write(f'     üìÅ Category: {cat_2567.category_name} ({"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà" if created else "‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"})')
                        
                        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Issues
                        issues_2567 = DocIssue.objects.filter(category=cat_2567)
                        for issue_2567 in issues_2567:
                            issue_2568, created = DocIssue.objects.get_or_create(
                                category=cat_2568,
                                issue_name=issue_2567.issue_name,
                                defaults={'issue_description': issue_2567.issue_description}
                            )
                            self.stdout.write(f'       üìù Issue: {issue_2567.issue_name} ({"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà" if created else "‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"})')
                            
                            # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Indicators
                            indicators_2567 = DocIndicator.objects.filter(issue=issue_2567)
                            for indicator_2567 in indicators_2567:
                                indicator_2568, created = DocIndicator.objects.get_or_create(
                                    issue=issue_2568,
                                    indicator_name=indicator_2567.indicator_name,
                                    defaults={'indicator_description': indicator_2567.indicator_description}
                                )
                                self.stdout.write(f'         üéØ Indicator: {indicator_2567.indicator_name} ({"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà" if created else "‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"})')
            else:
                self.stdout.write(self.style.WARNING('   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ 2567 ‡πÉ‡∏ô docChecker'))

            # 6. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            self.stdout.write(f'\n{"="*60}')
            self.stdout.write(self.style.SUCCESS('‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ 2568'))
            
            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
            info_months = Month.objects.filter(year=info_year_2568).count()
            info_data_entries = DataEntry.objects.filter(month__year=info_year_2568).count()
            green_categories = GreenCategory.objects.filter(year=green_year_2568).count()
            green_issues = GreenIssue.objects.filter(category__year=green_year_2568).count()
            green_indicators = GreenIndicator.objects.filter(issue__category__year=green_year_2568).count()
            doc_groups = CategoryGroup.objects.filter(year=doc_year_2568).count()
            doc_categories = DocCategory.objects.filter(category_group__year=doc_year_2568).count()
            doc_issues = DocIssue.objects.filter(category__category_group__year=doc_year_2568).count()
            doc_indicators = DocIndicator.objects.filter(issue__category__category_group__year=doc_year_2568).count()
            
            self.stdout.write(f'\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:')
            self.stdout.write(f'   üìÖ info_graph: {info_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, {info_data_entries} DataEntry')
            self.stdout.write(f'   üåø greenweb: {green_categories} Categories, {green_issues} Issues, {green_indicators} Indicators')
            self.stdout.write(f'   üìã docChecker: {doc_groups} Groups, {doc_categories} Categories, {doc_issues} Issues, {doc_indicators} Indicators')
            
            self.stdout.write(f'\nüìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô (Evidence) ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏°‡∏≤ ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà')
            self.stdout.write(self.style.SUCCESS(f'{"="*60}'))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'))
            raise e