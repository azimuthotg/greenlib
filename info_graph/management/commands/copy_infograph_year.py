from django.core.management.base import BaseCommand
from info_graph.models import Year, Month, DataEntry


class Command(BaseCommand):
    help = '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Year ‡πÅ‡∏•‡∏∞ Month ‡∏à‡∏≤‡∏Å‡∏õ‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡∏Å‡∏õ‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á (‡πÑ‡∏°‡πà‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DataEntry)'

    def add_arguments(self, parser):
        parser.add_argument('--from-year', type=int, help='‡∏õ‡∏µ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á (‡πÄ‡∏ä‡πà‡∏ô 2567)', required=True)
        parser.add_argument('--to-year', type=int, help='‡∏õ‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á (‡πÄ‡∏ä‡πà‡∏ô 2568)', required=True)

    def handle(self, *args, **options):
        from_year = options['from_year']
        to_year = options['to_year']

        self.stdout.write(f'‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Info Graph ‡∏à‡∏≤‡∏Å‡∏õ‡∏µ {from_year} ‡πÑ‡∏õ‡∏õ‡∏µ {to_year}...')

        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏µ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        try:
            source_year = Year.objects.get(year=from_year)
            self.stdout.write(f'‚úÖ ‡∏û‡∏ö‡∏õ‡∏µ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á: {source_year.year}')
        except Year.DoesNotExist:
            self.stdout.write(self.style.ERROR(f'‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏µ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á: {from_year}'))
            return

        # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡∏õ‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
        target_year, created = Year.objects.get_or_create(year=to_year)
        
        if created:
            self.stdout.write(self.style.SUCCESS(f'‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà: {target_year.year}'))
        else:
            self.stdout.write(f'üìÅ ‡∏û‡∏ö‡∏õ‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á: {target_year.year}')
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            existing_months = target_year.month_set.count()
            if existing_months > 0:
                confirm = input(f'‚ö† ‡∏õ‡∏µ {target_year.year} ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {existing_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà? (y/N): ')
                if confirm.lower() != 'y':
                    self.stdout.write('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£')
                    return
                else:
                    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (DataEntry ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏î‡πâ‡∏ß‡∏¢ cascade)
                    target_year.month_set.all().delete()
                    self.stdout.write('üóë ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')

        # 3. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÑ‡∏°‡πà‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DataEntry)
        self.stdout.write('üìÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô...')
        
        copied_months = 0
        source_months = Month.objects.filter(year=source_year).order_by('month')
        
        for source_month in source_months:
            new_month = Month.objects.create(
                year=target_year,
                month=source_month.month,
                month_name=source_month.month_name
            )
            copied_months += 1
            self.stdout.write(f'  üìÖ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {new_month.month_name}')

        # 4. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
        self.stdout.write('\n' + '='*50)
        self.stdout.write(self.style.SUCCESS('üéâ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!'))
        self.stdout.write(f'üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:')
        self.stdout.write(f'   üìÖ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å: {copied_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô')
        self.stdout.write(f'   üì• ‡∏à‡∏≤‡∏Å‡∏õ‡∏µ: {source_year.year}')
        self.stdout.write(f'   üì§ ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏õ‡∏µ: {target_year.year}')
        
        self.stdout.write('\nüìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:')
        self.stdout.write('   ‚úÖ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Year ‡πÅ‡∏•‡∏∞ Month ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')
        self.stdout.write('   ‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DataEntry (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà)')
        self.stdout.write('   üî¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô DataEntry ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á')
        
        self.stdout.write('\nüöÄ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:')
        self.stdout.write('   1. ‡πÄ‡∏Ç‡πâ‡∏≤ Django Admin ‚Üí Info Graph ‚Üí Data Entry')
        self.stdout.write('   2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ 2568')
        self.stdout.write('   3. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏Å‡πä‡∏≤‡∏ã‡πÄ‡∏£‡∏∑‡∏≠‡∏ô‡∏Å‡∏£‡∏∞‡∏à‡∏Å, ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤, ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏î‡∏µ‡πÄ‡∏ã‡∏•, ‡∏ô‡πâ‡∏≥, ‡∏Ç‡∏¢‡∏∞, ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©')
        
        self.stdout.write(f'\nüîó URL Admin: http://localhost:8001/admin/info_graph/dataentry/')
        self.stdout.write('='*50)